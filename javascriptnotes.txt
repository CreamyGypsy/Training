a=b*2   

Operators are: astericks for multiplication*, addition for plus +, dash for minus -, forward slash for divison /
Other operators that are weird: carrot ^ is not exponential, it is a bitwise. It converts a binary (6=110)and(3=011)
6^3=101
% percent symbol is the modulous operator. Only gives the remainder. Ex. 24hr clock. Also used in ordinal indicators (1st, 2nd, 3rd)
We can also do compound assignment with operators.
+=, -=, *=, /=
a=a+1  a+=1  a++ all produce the same output
a quality EQ
! (bang) means not
== (loose equals) example: quotes around something "99.99" 99.99 one of left is string, one on right is number
They are not exactly equal, they are different types. But they are loosely equal. Loose equal will convert one to 
the other and then compare them. They call it coersion.
=== (strict equals) It will not convert, it will simply compare. A lot of times we want the conversion.
!= (bang equals) Loose, not equals.
!=== (strict not equals)
Logical operators: These are going to be && (ampersands) and || (or)
p&&q these are statements (either T or F)  
!(p&&q) logically equivalent to p or q   !(p||q) logically equivalent to p&&q
Types are: String, Number, Bullion, Null and undefined, Symbol (only available in ES6)
Javascript is controlled by TC39, it's a collection of smart people from the top 200 companies in the world.
They decide everything, don't remove but add shit.
ECMA script (wiki later)
Different browsers will have different features implemented in different ways but they all have to meet the sta
If a customer opens your application in a browser that is using a new feature, and the browser does not support the feature,
it won't work.
Caniuse.com 


How to leave comments in code: // are a single line comment.
a multi line comment begins with a /*
Anything between to close: */

________________________________________-
Bullion logic to control execution flow of an application
Deanie thinks of them as code paths or directions, like driving in a car, but you never make a wrong turn.



Switch statement below Claires
Switch state outline
Cases with execute the first one that is true
Loops - repeating a set of actions until a condition fails
Loop is comprised of a test condition and a block.
Each time the loop executes the block, it's called an iteration
Expression one is an initialization, expression 2 is our conditional test, and expression 3 is our update
